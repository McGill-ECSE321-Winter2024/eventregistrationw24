@package ca.mcgill.ecse321.EventRegistration.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.sql.Date;
import java.sql.Time;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import ca.mcgill.ecse321.EventRegistration.models.Event;
import ca.mcgill.ecse321.EventRegistration.models.Person;
import ca.mcgill.ecse321.EventRegistration.models.Registration;

@SpringBootTest
public class RegistrationRepositoryTests {
	@Autowired
	private PersonRepository personRepository;
	@Autowired
	private EventRepository eventRepository;
	@Autowired
	private RegistrationRepository registrationRepository;

	@AfterEach
	public void clearDatabase() {
		registrationRepository.deleteAll();
		eventRepository.deleteAll();
		personRepository.deleteAll();
	}

	@Test
	public void testPersistAndLoadRegistration() {
		// Create and persist person.
        String name = "Muffin Man";
		Date birthday = Date.valueOf("1990-01-01");
		String address = "123 Drury Lane";
		Person person = new Person();
		person.setName(name);
		person.serBirthday(birthday);
		person.setAddress(address);
		personRepository.save(person);

		// Create and persist event.
		String eventName = "Shrek 2";
		Date eventDate = Date.valueOf("2023-12-01");
		Time eventStart = Time.valueOf("08:00:00");
		Time eventEnd = Time.valueOf("12:00:00");
		Event event = new Event();
		event.setName(eventName);
		event.setDate(eventDate);
		event.setStartTime(eventStart);
		event.setEndTime(eventEnd);
		eventRepository.save(event);

		// Create registration.
		Registration registration = new Registration();
		registration.setPerson(person);
		registration.setEvent(event);

		// Save registration.
		registrationRepository.save(registration);

		// Read registration from database.
		registration = registrationRepository.findByPersonAndEvent(person, event);
		assertNotNull(registration);
		assertNotNull(registration.getId());
		assertEquals(person.getName(), registration.getPerson().getName());
		assertEquals(person.getAge(), registration.getPerson().getAge());
		assertEquals(person.getAddress(), registration.getPerson().getAddress());
		assertEquals(event.getName(), registration.getEvent().getName());
		assertEquals(event.getDate(), registration.getEvent().getDate());
		assertEquals(event.getStartTime(), registration.getEvent().getStartTime());
		assertEquals(event.getEndTime(), registration.getEvent().getEndTime());
	}
}